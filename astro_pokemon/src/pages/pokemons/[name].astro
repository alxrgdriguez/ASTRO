---
import type { GetStaticPaths } from "astro";
import MainLayout from "@layouts/MainLayout.astro";
import { Icon } from "astro-icon/components";

import PokemonCard from "@components/pokemons/pokemonCard.astro";
import type { PokemonListResponse } from "../../interfaces/pokemon-list.response";
import Title from "@components/shared/Title.astro";

export const getStaticPaths = (async () => {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const data = (await res.json()) as PokemonListResponse;

  const params = data.results.map((pokemon) => ({
    params: {
      name: pokemon.name.toLowerCase(),
    },
    props: {
      url: pokemon.url,
    },
  }));

  return params;
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const title = `${name.charAt(0).toUpperCase()}${name.slice(1)} - Pokemon`;
const id = url.split("/").at(-2);

const criesSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={title}
  description={`InformaciÃ³n sobre el pokemon ${name}`}
  image={imageSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="mb-5">
      <!-- history.back volver a la pagina anterior -->
      <button
        onclick="history.back()"
        class="text-blue-500 hover:underline mb-2">Regresar</button
      >
      <Title>{name}</Title>
    </div>

    <button id="btn-favorite" data-name={name} data-id={id}>
      <Icon data-outline name="heart-outline" size={50} />
      <Icon data-full class="hidden" name="heart-full" size={50} />
    </button>

    <PokemonCard name={name} url={url} isBig />
    <audio class="mt-5" controls>
      <source src={criesSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<script>
  interface favoritePokemon {
    id: number;
    name: string;
  }

  // document.addEventListener("astro:before-preparation", () => {
  //   console.log("astro:before-preparation");
  // });

  // document.addEventListener("astro:after-preparation", () => {
  //   console.log("astro:after-preparation");
  // });

  // document.addEventListener("astro:before-swap", () => {
  //   console.log("astro:before-swap");
  // });

  // document.addEventListener("astro:after-swap", () => {
  //   console.log("astro:after-swap");
  // });

  // document.addEventListener("astro:page-load", () => {
  //   console.log("astro:page-load");
  // });

  const handlePageLoad = () => {
    let favoritePokemon: favoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) {
      return;
    }

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? 0;
    const isFavorite = favoritePokemon.find((fav) => fav.name === name);

    const heartOutLine = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;

    // Hacer la funcion para mostrar o ocultar corazon lleno

    if (isFavorite) {
      heartOutLine.classList.add("hidden");
      heartFull.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemon.some((fav) => fav.name === name);
      if (isFavorite) {
        // Remover
        favoritePokemon = favoritePokemon.filter((fav) => fav.name !== name);
      } else {
        // Agregar
        favoritePokemon.push({
          id: +id,
          name: name,
        });
      }
      localStorage.setItem("favorites", JSON.stringify(favoritePokemon));
    };

    btnFavorite.addEventListener("click", () => {
      heartOutLine.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
  }
</style>
